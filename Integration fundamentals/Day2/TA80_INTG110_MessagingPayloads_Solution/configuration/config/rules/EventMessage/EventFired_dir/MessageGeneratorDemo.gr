package rules.EventMessage.EventFired_dir

@gw.rules.RuleName("Message Generator Demo")
internal class MessageGeneratorDemo {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
    
/*start00rule*/
return // This rule executes demo-only functionality. For
// simplicity sake, the Event Fired logic has been placed in
// a single rule (as opposed to a rule hierarchy). This is not
// considered best practice for production messaging
// integration points.
messageContext.DestID == 21
and messageContext.Root typeis MessageGenerator
/*end00rule*/

  }

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {

/*start00rule*/
print ("Executing event fired rules: Event " + messageContext.EventName + " for destination " +
                   messageContext.DestID + " for Message Generator " +
                   (messageContext.Root as MessageGenerator).Name)
                   
//messageContext root must be cast to appropriate type
var aMessageGenerator = messageContext.Root as MessageGenerator
var msg : Message
var payload = aMessageGenerator.Name
msg = messageContext.createMessage(payload)
/*end00rule*/

  }
}
